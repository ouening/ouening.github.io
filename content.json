{"meta":{"title":"Wenqing's blog","subtitle":"","description":"A Phd student at South China University of Technology, High Voltage Electrical Engineering","author":"Wenqing Zhou","url":"https://ouening.github.io","root":"/"},"pages":[{"title":"Project","date":"2021-08-23T15:22:34.717Z","updated":"2021-08-23T15:22:34.717Z","comments":true,"path":"project/index.html","permalink":"https://ouening.github.io/project/index.html","excerpt":"","text":""},{"title":"About","date":"2021-08-23T15:22:34.714Z","updated":"2021-08-23T15:22:34.714Z","comments":true,"path":"about/index.html","permalink":"https://ouening.github.io/about/index.html","excerpt":"","text":""},{"title":"Series","date":"2021-08-23T15:22:34.720Z","updated":"2021-08-23T15:22:34.720Z","comments":true,"path":"series/index.html","permalink":"https://ouening.github.io/series/index.html","excerpt":"","text":""},{"title":"Tags","date":"2021-08-23T15:22:34.723Z","updated":"2021-08-23T15:22:34.723Z","comments":true,"path":"tags/index.html","permalink":"https://ouening.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"caj转pdf","slug":"caj转pdf","date":"2021-08-23T14:42:24.000Z","updated":"2021-08-24T03:25:35.647Z","comments":true,"path":"2021/08/23/caj转pdf/","link":"","permalink":"https://ouening.github.io/2021/08/23/caj%E8%BD%ACpdf/","excerpt":"","text":"caj文件是知网自己开发的一种文档格式，很多时候并不方便阅读和做笔记，因此在网上找到了caj2pdf这个工具，项目地址在： https://github.com/caj2pdf/caj2pdf 1.环境依赖： python3.3+ pypdf2 (pip install -U pypdf2) mutool (windows下需要从https://mupdf.com/index.html下载，并放到caj2pdf.py相同目录下) 2.用法 123456789# 打印文件基本信息（文件类型、页面数、大纲项目数）caj2pdf show [input_file]# 转换文件caj2pdf convert [input_file] -o/--output [output_file]# 从 CAJ 文件中提取大纲信息并添加至 PDF 文件## 遇到不支持的文件类型或 Bug 时，可用 CAJViewer 打印 PDF 文件，并用这条命令为其添加大纲caj2pdf outlines [input_file] -o/--output [pdf_file]","categories":[],"tags":[{"name":"工具","slug":"工具","permalink":"https://ouening.github.io/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"scipy求解矩阵微分方程","slug":"scipy求解矩阵微分方程","date":"2021-06-04T16:00:00.000Z","updated":"2021-08-24T04:12:09.332Z","comments":true,"path":"2021/06/05/scipy求解矩阵微分方程/","link":"","permalink":"https://ouening.github.io/2021/06/05/scipy%E6%B1%82%E8%A7%A3%E7%9F%A9%E9%98%B5%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/","excerpt":"","text":"形如 X′=AX+bX&#x27;=AX+b X′=AX+b 的矩阵微分方程目前在scipy中是没有接口直接处理的，需要自己手动转换一下格式，但对应这种格式MATLAB的ode求解器是支持直接求解的。 本文基于https://wenku.baidu.com/view/8fc76d6bfbd6195f312b3169a45177232f60e4f9.html?re=view 的例子（原例子是用MATLAB求解的，采用scipy求解一组矩阵微分方程： python程序如下： 123456789101112131415161718192021222324252627282930313233343536373839from scipy.integrate import solve_ivpimport numpy as npimport matplotlib.pyplot as pltk1 = k2 = k3 = 1m1 = m2 = m3 = 1# f1 = f2 = f3 = 5*np.sin(1.25*t)A = np.array([[0,0,0,1,0,0], [0,0,0,0,1,0], [0,0,0,0,0,1], [-(k1+k2)/m1, k2/m1, 0,0,0,0], [k2/m2,-(k2+k3)/m2,k3/m2,0,0,0], [0,k3/m3,-k3/m3,0,0,0]] )B = np.array([[0,0,0], [0,0,0], [0,0,0], [1/m1,0,0], [0,1/m2,0], [0,0,1/m3] ])# solve dX/dt = A*X+bdef func(t,y): #dX/dt = A*X+b# x1,x2,x3,x4,x5,x6 = y f = np.array([5*np.sin(1.25*t),5*np.sin(1.25*t),5*np.sin(1.25*t)]) # 主要下面直接用到了列表推导 return [np.dot(A[i,:], y)+np.dot(B[i,:],f) for i in range(6)]N = 30t_span = (0,N)t_eval = np.linspace(0,N,1000)y0 = [0,0,0,0,0,0]sol = solve_ivp(func, t_span, y0, t_eval=t_eval)plt.plot(sol.t, sol.y.T)plt.grid(&#x27;on&#x27;)plt.show() 结果如下，和原文结果一致： 总结：scipy也是可以求解矩阵微分方程的，只不过需要转换一下格式","categories":[{"name":"Math","slug":"Math","permalink":"https://ouening.github.io/categories/Math/"}],"tags":[{"name":"python","slug":"python","permalink":"https://ouening.github.io/tags/python/"}]}],"categories":[{"name":"Math","slug":"Math","permalink":"https://ouening.github.io/categories/Math/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://ouening.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"python","slug":"python","permalink":"https://ouening.github.io/tags/python/"}]}